import BaseApplication from '../Core/BaseApplication';
import Response from '../Core/Http/Response';
import AccessToken from '../OfficialAccount/Auth/AccessToken';
import UrlClient from '../BaseService/Url/UrlClient';
import PaymentBase from './Base/PaymentBase';
import BillClient from './Bill/BillClient';
import CouponClient from './Coupon/CouponClient';
import JssdkClient from './Jssdk/JssdkClient';
import MerchantClient from './Merchant/MerchantClient';
import OrderClient from './Order/OrderClient';
import RedpackClient from './Redpack/RedpackClient';
import RefundClient from './Refund/RefundClient';
import ReverseClient from './Reverse/ReverseClient';
import SandboxClient from './Sandbox/SandboxClient';
import TransferClient from './Transfer/TransferClient';
import SecurityClient from './Security/SecurityClient';
import ProfitSharingClient from './ProfitSharing/ProfitSharingClient';
export default class Payment extends BaseApplication {
    protected defaultConfig: object;
    base: PaymentBase;
    bill: BillClient;
    coupon: CouponClient;
    jssdk: JssdkClient;
    merchant: MerchantClient;
    order: OrderClient;
    redpack: RedpackClient;
    refund: RefundClient;
    reverse: ReverseClient;
    sandbox: SandboxClient;
    transfer: TransferClient;
    security: SecurityClient;
    profit_sharing: ProfitSharingClient;
    access_token: AccessToken;
    url: UrlClient;
    constructor(config?: Object, prepends?: Object, id?: String);
    registerProviders(): void;
    scheme(product_id: string): string;
    codeUrlScheme(codeUrl: string): string;
    setSubMerchant(mchId: string, appId?: string): object;
    inSandbox(): boolean;
    getKey(endpoint?: string): any;
    handlePaidNotify(closure: Function): Promise<Response>;
    handleRefundedNotify(closure: Function): Promise<Response>;
    handleScannedNotify(closure: Function): Promise<Response>;
    pay(): Promise<any>;
    authCodeToOpenid(): Promise<any>;
}
